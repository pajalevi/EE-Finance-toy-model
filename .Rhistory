# toy model setup
source('~/research/EE FF/toy model/model_initialize.R')
source('W:\\Research\\Energy Efficiency\\EE Finance toy model\\model1.R')
source('W:\\Research\\Energy Efficiency\\EE Finance toy model\\bank_hurdle.R')
mo=.01
yr=mo^12
yr
yr=.05
1-(i-yr)^(1/n)
1-(1-yr)^(1/n)
n=12
1-(1-yr)^(1/n)
mo.rate = function (yr.rate,n=12){
monthly = 1-(1-yr.rate)^(1/n)
return(monthly)
}
yr.rate = function (mo.rate, n=12){
yearly =1-(1-mo.rate)^n
return(yearly)
}
mo.rate(6)
mo.rate(yr.rate=6)
mo.rate(yr.rate=.06)
mo.rate(yr.rate=.6)
mo.rate(yr.rate=.999)
mo.rate(yr.rate=1)
mo.rate(yr.rate=2)
mo.rate(yr.rate=1.0001)
mo.rate = function (yr.rate,n=12){
if(yr.rate>1) {stop("yearly rate is greater than 100%, which is breaking the math")}
monthly = 1-(1-yr.rate)^(1/n)
return(monthly)
}
mo.rate(yr.rate=1.0001)
yr.rate(.06)
yr.rate2(.06)
yr.rate2 = function (mo.rate, n=12){
if(mo.rate>1) {stop("monthly rate is greater than 100%, which is breaking the math")}
yearly =((1+mo.rate)^n)-1
return(yearly)
}
yr.rate2(.06)
source('W:/Research/Energy Efficiency/EE Finance toy model/modelinit_bank_hurdle.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/modelinit_bank_hurdle.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/modelinit_bank_hurdle.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/modelinit_bank_hurdle.R')
input
inputs
input=inputs
if (input$tenor[i] > input$ee.lifetime[i]) print("WARNING: loan tenor is longer than the lifetime of the EE project!")
#------------------------------#
# account for gvt intervention #
#------------------------------#
#!# Interest will be given as an output, not an input
#!#    interest.user.yr = input$interest.yr[i] - input$interest.buydown[i]
loan.amt = input$eecost[i] - input$upfront.rebate[i]
if(input$loan.loss[i]){
reserve.size = input$chance.full.loss[i] * loan.amt
} else {
reserve.size = 0
}
i=1
if (input$tenor[i] > input$ee.lifetime[i]) print("WARNING: loan tenor is longer than the lifetime of the EE project!")
#------------------------------#
# account for gvt intervention #
#------------------------------#
#!# Interest will be given as an output, not an input
#!#    interest.user.yr = input$interest.yr[i] - input$interest.buydown[i]
loan.amt = input$eecost[i] - input$upfront.rebate[i]
if(input$loan.loss[i]){
reserve.size = input$chance.full.loss[i] * loan.amt
} else {
reserve.size = 0
}
interest.mo=input$interest.yr[i]/12
interest.user.mo = interest.user.yr/12
bank.hurdle.mo = input$bank.hurdle[i]/12
user.discount.mo = input$user.discount[i]/12
gvt.discount.mo = input$gvt.discount[i]/12
npmt = input$tenor[i]*12 # number of payments over tenor of loan
#!# gota switch the calculation
#find present value of loan
## bank present value ##
loan.payment = -pmt(interest.mo, npmt, loan.amt)
input
i=2
if(input$loan.loss[i]){ #if there is a loan loss reserve
#!#     loan.NPV.bank = loan.payment/bank.hurdle.mo * (1 - (1/((1+bank.hurdle.mo)^(npmt))))
# agrees with pv() function. i.e same as
# loan.NPV.bank = - pv(rate=bank.hurdle.mo,nper=input$tenor*12, pmt = loan.payment)
}  else {
#-----------------------------------------------------#
# calculate expected value of stream of loan payments #
# given expected probability of default over time     #
#-----------------------------------------------------#
# chance of default in a given month - assumes uniform distribution
default.chance.mo = sub.prob(input$chance.full.loss[i],npmt) #ie chance of default in a given payment cycle (month)
# cumulative chance of default by a given month
cum.default.chance = default.chance.mo ^ seq(1,npmt,by=1) #this makes a list with length 12*tenor=npmt
# PV of each payment made in a given month
PV.payment  = loan.payment / (1+bank.hurdle.mo)^seq(1,npmt,by=1) #this is a list with length 12*tenor
# total NPV of expected value of loan repayments
loan.NPV.bank = sum((1-cum.default.chance) * PV.payment)
}
default.chance.mo = sub.prob(input$chance.full.loss[i],npmt) #ie chance of default in a given payment cycle (month)
cum.default.chance = default.chance.mo ^ seq(1,npmt,by=1) #this makes a list with length 12*tenor=npmt
PV.payment  = loan.payment / (1+bank.hurdle.mo)^seq(1,npmt,by=1) #this is a list with length 12*tenor
loan.NPV.bank = sum((1-cum.default.chance) * PV.payment)
default.chance.mo
cum.default.chance
default.chance.mo
input$chance.full.loss[i]
sub.prob = function (prob, n){
if(yr.rate>1) {stop("prob is greater than 1, which is breaking the math")}
r_p =1-((1-prob)^(1/n))
return(r_p)
}
default.chance.mo = sub.prob(input$chance.full.loss[i],npmt) #ie chance of default in a given payment cycle (month)
sub.prob = function (prob, n){
if(prob>1) {stop("prob is greater than 1, which is breaking the math")}
r_p =1-((1-prob)^(1/n))
return(r_p)
}
default.chance.mo = sub.prob(input$chance.full.loss[i],npmt) #ie chance of default in a given payment cycle (month)
default.chance.mo
input$chance.full.loss[i]
input$chance.full.loss[i]/npmt
cum.default.chance = default.chance.mo ^ seq(1,npmt,by=1) #this makes a list with length 12*tenor=npmt
PV.payment  = loan.payment / (1+bank.hurdle.mo)^seq(1,npmt,by=1) #this is a list with length 12*tenor
PV.payment
loan.payment
loan.payment = -pmt(interest.mo, npmt, loan.amt)
loan.payment
interest.mo
npmt
loan.amt
interest.mo=5/12
loan.payment = -pmt(interest.mo, npmt, loan.amt)
PV.payment  = loan.payment / (1+bank.hurdle.mo)^seq(1,npmt,by=1) #this is a list with length 12*tenor
PV.payment
PV.paymentn=10
N=10
numeric(N)
is.numeric(N)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
f=function(x){x^3 + 4x^2 - 10}
f=function(x) {x^3 + 4x^2 - 10}
f <- function(x) {x^3 + 4x^2 - 10}
f <- function(x) {x^3 + 4*x^2 - 10}
newton.solve(f)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('~/.active-rstudio-document')
newton.solve(f)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
newton.solve(f)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
newton.solve(f)
newton.solve(f,x0=1)
f =expression (x^3 + 4*x^2 - 10)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
newton.solve(f,x0=1)
newton.solve(f,x0=1)
newton.solve(f,x0=1)
dydx
x0
x0
x0=.05
dydx = D(f,"x")
dydx
f
df.dx =  eval(dydx, x0)
df.dx =  eval(dydx, list(x=x0)
)
df.dx
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
newton.solve(f,x0=1)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
newton.solve(f,x0=1)
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('W:/Research/Energy Efficiency/EE Finance toy model/newton.solve.R')
source('W:\\Research\\Energy Efficiency\\EE Finance toy model\\bank_hurdle.R')
clear()
r=.05
PV=10000
n=144
r*PV/(1-(1+r)^(-n))
-PB*r*(i+r)^n/(1+r)
-PV*r*(i+r)^n/(1+r)
10000/144
PV/n
r*PV/(1-((1+r)^(-n)))
n=12
n=10
r*PV/(1-((1+r)^(-n)))
PV/n
r=r/12
n=144
r*PV/(1-((1+r)^(-n)))
r
load("W:/Research/Energy Efficiency/EE Finance toy model/model-runs/sensitivityRiskPremia.R")
sensitivityRiskPremia = inputs
load("W:/Research/Energy Efficiency/EE Finance toy model/model-runs/sensitivityTesting-run-riskAdjust.R")
riskAdjust = inputs
riskAdjust$risk.adjust
unique(riskAdjust$risk.adjust)
unique(sensitivityRiskPremia$risk.adjust)
riskAdjust = inlist
load("W:/Research/Energy Efficiency/EE Finance toy model/model-runs/sensitivityRiskPremia.R")
sensitivityRiskPremia = inlist
riskAdjust
sensitivityRiskPremia
i=1
default.chance.mo = sub.prob(input$chance.full.loss[i],npmt) #ie chance of default in a given payment cycle (month)
npmt
npmt = input$tenor[i]*12 # number of payments over tenor of loan
k = seq(1,npmt,by=1)
no.default.chance = (1-default.chance.mo) ^ k #this makes a list with length 12*tenor=npmt
plot(no.default.chance, type='l')
head(no.default.chance)
plot(1-no.default.chance, type='l')
input$chance.full.loss[i]
head(default.chance.mo)
default.chance.mo
1-default.chance.mo
default.chance.mo = sub.prob(.2, npmt)
default.chance.mo
1-default.chance.mo
default.chance.mo = .02
no.default.chance = (1-default.chance.mo) ^ k #this makes a list with length 12*tenor=npmt
plot(1-no.default.chance, type='l')
input$chance.full.loss[i]
max(no.default.chance)
.31-1
load("W:/Research/Energy Efficiency/EE Finance toy model/model-runs/lowRisk.newPremia.R")
inlist
